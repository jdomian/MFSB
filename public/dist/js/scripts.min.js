let camera;document.addEventListener("DOMContentLoaded",function(e){mfsb.init(),mfsb.crossHairType(),console.log("init loaded"),camera=$("#camera-wrapper"),$("[data-nav-to]").on("touchend",e=>{let t=e.target.dataset.navTo;console.log(t),$("#main-info-text").text(t),$("[data-nav]").removeClass("active"),$(".arc").removeClass("in"),$("[data-nav="+t+"]").addClass("active").children(".arc").addClass("in"),$(".arc").removeClass("active")})});var App=()=>(function(){console.log("app start"),alert("hi")});const socket={local:io()},stream=document.getElementById("stream"),trackingCanvas=document.getElementById("tracking-canvas"),base64Canvas=document.getElementById("base64-canvas");let tensorFlow,mfsb={cameraZoomLevel:1,init(){console.log("Mutha Fuckin Space Blaster Initialized."),mfsb.crossHairType()},zoomIn(){let e=2*this.cameraZoomLevel;this.cameraZoomLevel=e,camera.css("transform","scale("+e+", "+e+")")},zoomOut(){let e=this.cameraZoomLevel/2;e<1&&(e=1),this.cameraZoomLevel=e,camera.css("transform","scale("+e+", "+e+")")},crossHairType(e){let t=localStorage.getItem("crosshair-type");null===t||void 0===e?localStorage.setItem("crosshair-type","standard"):localStorage.setItem("crosshair-type",e),t=localStorage.getItem("crosshair-type"),$(".crosshair").hide(),$("#crosshair > #"+t).show()},ml5AIDetect(){let e,t=ml5.objectDetector("MobileNet",{},function(){let a=$("#debug-ai");e=setInterval(()=>{t.detect(stream,(e,t)=>{console.log(t),void 0!==t&&a.text(t[0].label,t[0].height,t[0].width)})},2e3)})},accelerometerStart(){let e=0;socket.local.emit("startAccelerometer",!0),$("#debug-accel").text("Starting Accelerometer..."),socket.local.on("accelerometer",t=>{let a=t.split(","),o=Math.round(2*a[0])/2,r=Math.round(2*a[1])/2,s=a[2],c=-10*o,n=-9*r;$("#accel-Y-line").css("transform","translate(0,"+c+"vh)"),$("#accel-X-line").css("transform","translate("+n+"vw, 0vh)"),$("#accel-X-line").css("transform","rotate("+n+"deg)"),(c>0&&10*s-10*o<100||c<0&&10*s-10*o>100)&&(console.log("Fired!"),$("#debug-accel").text("Fired!")),e=c})},accelerometerStop(){console.log("Stopping accelerometer reading"),$("#debug-accel").text("Accelerometer Stopped."),socket.local.emit("stopAccelerometer",!0)},accelerometerPin(){let e=$(".accel-line").detach();$("#pinned > #accelerometer").html(e)},tensorFlowStart(){let e=this;$("#debug-ai").text("AI Started...");tensorFlow=setInterval(()=>{socket.server.emit("stream",(()=>e.convertToBase64())())},1e3),socket.server.on("AIIdentified",e=>{console.log(e);let t=e[0].bbox[0],a=e[0].bbox[1],o=e[0].bbox[2],r=e[0].bbox[3],s=e[0].class,c=e[0].score;$("#debug-ai").text(s+" --- "+Math.round(100*c)+"%"),$("#TFTarget").css({top:a,left:t,height:r,width:o})})},tensorFlowStop(){clearInterval(tensorFlow),$("#debug-ai").text("AI Stopped"),console.log("test")},trackAndRenderLocal(){const e=document.getElementById("stream");this.renderBox([200,200,200,200]);const t=objectTracker.init(e,[200,200,200,200]);setInterval(async()=>{let e=document.getElementById("stream"),a=await t.next(e);console.log(a),mfsb.renderBox(a)},100)},trackAndRenderLocalAjax(){const e=document.getElementById("stream");this.renderBox([200,200,200,200]);const t=objectTracker.init(e,[200,200,200,200]);setInterval(async()=>{let e=document.getElementById("stream"),a=await t.next(e);console.log(a),mfsb.renderBox(a)},100)},trackAndRenderLocalWorker(){const e=document.getElementById("stream"),t=objectTracker.init(e,[200,200,200,200]);socket.local.emit("track",t)},trackAndRender(){const e=this;e.renderBox([180,180,120,120]),setInterval(async()=>{let t=await e.convertToBase64(),a=new Date,o=a.getHours()+":"+a.getMinutes()+":"+a.getSeconds();console.log("["+o+"]Image converted... sending."),await socket.server.emit("track",t)},0),socket.server.on("objectTracker",e=>{this.renderBox(e)})},lockTarget(){socket.server.emit("lock-target",[180,180,120,120]),socket.server.emit("lock-target-profile",this.convertToBase64()),this.renderBox([180,180,120,120])},renderBox(e){trackingCanvas.width=480,trackingCanvas.height=480;let t=trackingCanvas.getContext("2d");t.clearRect(0,0,t.canvas.width,t.canvas.height),t.lineWidth=2,t.strokeStyle="yellow",t.strokeRect(e[0],e[1],e[2],e[3])},convertImageToCanvas(){base64Canvas.width=stream.width,base64Canvas.height=stream.height;const e=base64Canvas.getContext("2d");return e.drawImage(stream,0,0),e},convertToBase64:()=>(base64Canvas.width=stream.width,base64Canvas.height=stream.height,base64Canvas.getContext("2d").drawImage(stream,0,0),base64Canvas.toDataURL("data:image/jpg;charset=utf-8;base64,",.1)),sudoReboot(){socket.local.emit("sudoReboot",!0)},sudoShutdown(){socket.local.emit("sudoShutdown",!0)}};
//# sourceMappingURL=data:application/json;charset=utf8;base64,

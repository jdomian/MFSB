<!DOCTYPE html>
<html>
  <head>
    <link href="libs/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
    <link href="css/styles.css" rel="stylesheet" />
    <style>

    </style>
  </head>
  <body>
    <div id="screens-carousel" class="carousel" data-bs-interval="false" data-bs-wrap="true">
      <div class="carousel-indicators">
        <button type="button" data-bs-target="#screens-carousel" data-bs-slide-to="0" class="active" aria-current="true" aria-label="Slide 1"></button>
        <button type="button" data-bs-target="#screens-carousel" data-bs-slide-to="1" aria-label="Slide 2"></button>
        <button type="button" data-bs-target="#screens-carousel" data-bs-slide-to="2" aria-label="Slide 3"></button>
      </div>
      <div class="carousel-inner">
        <div class="carousel-item active">
          <!-- <div id="ammoScreen">
            <div id="ammoCount">10</div>
            <progress id="ammoProgress" value="10" max="10"></progress>
          </div> -->
          <div id="ammoScreen">
            <div class="circular">
              <div class="inner"></div>
              <div class="number ammoCount" id="ammoCount">10</div>
              <div class="circle">
                <div class="bar left">
                  <div class="progress"></div>
                </div>
                <div class="bar right">
                  <div class="progress"></div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="carousel-item">
            <div id="targetScreen">
              <div class="number ammoCount">10</div>
              <div class="crosshair type-1">
                <!-- <div class="circular">
                  <div class="inner"></div>
                  <div class="circle">
                    <div class="bar left">
                      <div class="progress"></div>
                    </div>
                    <div class="bar right">
                      <div class="progress"></div>
                    </div>
                  </div>
                </div> -->
              </div>
              <img id="webcamPi" src="http://localhost:3000/stream.mjpg" style="position: absolute; transform: scale(1);" />
            </div>
        </div>
        <div class="carousel-item">
            <div id="compassScreen">
              <!--<canvas crossOrigin="anonymous" id='test_canvas' width='240px' height='240px'></canvas>-->
              <video crossOrigin="anonymous" id="video" width='240px' height='240px'></video>
              <video id="gum-local" autoplay playsinline></video>
  <button id="showVideo">Open camera</button>
            </div>
        </div>
      </div>
      <div class="debug">
        <button class="btn btn-debug" id="debugFire">Fire</button>
        <button class="btn btn-debug" id="debugReload">Reload</button>
        <button class="btn btn-debug" id="debugCycle">Cycle</button>
        <button class="btn btn-debug" id="debugSelect">Select</button>
      </div>
    </div>
    <div id="reload-debug">
      <div>Reload<input type="button" id="btnReload" value="1"></div>
    </div>


<!--
    <section id="demos">
      <h2>Demo: Classifying Images</h2>
      <p><em>Click on an image below</em> to try and recognize what is in the image using the power of Machine Learning! Notice how in this demo we not only know if the object is in the image, but also its position in the image. Very useful.</p>

      <div class="classifyOnClick">
        <img src="https://cdn.glitch.com/74418d0b-3465-49a2-8c71-a721b7734473%2Fdoggo.jpg?v=1592266725716" crossorigin="anonymous" title="Click to get classification!" />
      </div>
      <div class="classifyOnClick">
        <img src="https://cdn.glitch.com/74418d0b-3465-49a2-8c71-a721b7734473%2Fcoupledog.jpg?v=1591311552891" crossorigin="anonymous" title="Click to get classification!" />
      </div>


      <h2>Demo: Webcam continuous classification</h2>
      <p>Hold some objects up close to your webcam to get a real-time classification! You must be on <a href="https://glitch.com/~tensorflow-js-object-detection">the https version of the website</a> for this to work. When ready click "enable webcam" below and accept access to the webcam when the browser asks (check the top left of your window)</p>
      
      <div id="liveView" class="videoView">
        <button id="webcamButton">Enable Webcam</button>
        <video crossOrigin="anonymous" id="webcam" autoplay></video>
      </div>
    </section>
  -->
    <script src="js/jquery-3.6.0.min.js"></script> <!-- include socket.io client side script -->
    <script src="libs/bootstrap/js/bootstrap.min.js"></script> <!-- include socket.io client side script -->
    <script src="socket.io/socket.io.js"></script> <!-- include socket.io client side script -->
    <script>
      
      var hold = 0;
      var maxRounds = 10;
      var currentRounds = maxRounds;
      var ammoCount = $('.ammoCount');
      var btnReload = document.getElementById("btnReload");
      function reload() {
          var data = btnReload.value;
          socket.emit("btnReload", data); //send button status to server (as 1 or 0)
          ammoCount.innerText = maxRounds;
          $('#ammoScreen .bar.right').css('transform', 'rotate(180deg)').removeClass('transparent');
          $('#ammoScreen .bar.left').css('transform', 'inherit');
      }


      
      function fire(count) {
        console.log(count); //Log when button is pushed
        ammoCount.text(count);
        let precentDeg = 180 - ((maxRounds - count) * 36);

        if (count / maxRounds >= 0.5) {
            $('#ammoScreen .bar.right').css('transform', 'rotate(' + precentDeg + 'deg)');
        }
        else {
            $('#ammoScreen .bar.right').css('transform', 'rotate(180deg)').addClass('transparent');
            $('#ammoScreen .bar.left').css('transform', 'rotate(' + precentDeg + 'deg)');
        }

      }


      var socket = io(); //load socket.io-client and connect to the host that serves the page
      
      window.addEventListener("load", function(){ //when page loads
        
        
        btnReload.addEventListener("click", function() { //add event listener for when checkbox changes
          reload();
        });

      });
      
      // socket.on('light', function (data) { //get button status from client
      //   document.getElementById("btnReload").value = data; //change checkbox according to push button on Raspberry Pi
      //   socket.emit("light", data); //send push button status to back to server
      // });
      
      socket.on("ammoCount", (arg) => {
        currentRounds = arg;
        fire(currentRounds);
      });

      socket.on("reloadStatus", (arg) => {
        reload();
        console.log(arg); //Log when button is pushed
        ammoCount.text(maxRounds);
      });

      socket.on("cycleScreen", (arg) => {
        
        console.log(arg);
        

        if (arg == 0) {
          hold = setTimeout("changeScreen()",3000);
        }
        else {
          console.log(hold);
          console.log('Changin Mode/Selection');
          clearTimeout(hold);
        }
        
        
      });

      function changeScreen() {
        console.log('Cycling screen');
        clearTimeout(hold);
        $('.carousel').carousel('next');
      }

      //Debugging
      $('#debugFire').click(function(){
          fire(currentRounds);
      });
      $('#debugCycle').click(function(){
        $('.carousel').carousel('next');
      });


      
</script>

<!--Converts MJPEG to canvas for streaming.-->
<script language="JavaScript">
  var ctx = document.getElementById('test_canvas').getContext('2d');
  var img = document.getElementById('webcamPi');
  //var img = new Image();
  img.onload = function() {
    ctx.drawImage(img, 0, 0);
  };
  //var theDate = new Date();
  //img.src = "http://10.0.2.222:3000/stream.mjpg";
  window.setInterval("refreshCanvas()", 10);
function refreshCanvas(){
  ctx.drawImage(img, 0, 0);
};
</script>
<!--
<script src="https://webrtc.github.io/adapter/adapter-1.0.7.js"></script>
<script src="https://lonekorean.github.io/diff-cam-scratchpad/diff-cam-engine.js"></script>
<script src="js/diff-cam.js"></script>
-->

<!-- Import TensorFlow.js library -->
<!--<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.11.0/dist/tf.min.js" type="text/javascript"></script>-->
    
<!-- Load the coco-ssd model to use to recognize things in images -->
<!--<script src="https://cdn.jsdelivr.net/npm/@tensorflow-models/coco-ssd"></script>-->
<!--<script src="js/tf-scripts.js"></script>-->
<div id="container">
  <h1><a href="//webrtc.github.io/samples/" title="WebRTC samples homepage">WebRTC samples</a>
      <span>getUserMedia</span></h1>

  <video id="gum-local" autoplay playsinline></video>
  <button id="showVideo">Open camera</button>

  <div id="errorMsg"></div>

  <p class="warning"><strong>Warning:</strong> if you're not using headphones, pressing play will cause feedback.</p>

  <p>Display the video stream from <code>getUserMedia()</code> in a video element.</p>

  <p>The <code>MediaStream</code> object <code>stream</code> passed to the <code>getUserMedia()</code> callback is in
      global scope, so you can inspect it from the console.</p>

  <a href="https://github.com/webrtc/samples/tree/gh-pages/src/content/getusermedia/gum"
     title="View source for this page on GitHub" id="viewSource">View source on GitHub</a>
</div>
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="js/main.js"></script>

</body>
</html>
const http = require('http'); //require http server for createServer()
const fs = require('fs'); //require filesystem module
const path = require('path');
const io = require('socket.io')(http,{allowEIO3: true}) //require socket.io module and pass the http object (server)
const rpio = require('rpio');

const port = process.argv[2] || 8080; //Server Port Number Used
const rpioPin = 7; //RPi Pin Number, needs to be a GPIO pin
let ammo = 10; //Ammo count

//Open listener on GPIO pin
rpio.open(rpioPin, rpio.INPUT, rpio.PULL_UP);
console.log('Pin' + rpioPin + ' is currently ' + (rpio.read(rpioPin) ? 'high' : 'low'));

//Create Node server to handle requests
http.createServer(function (request, response) {
    console.log('request ', request.url);

    var filePath = '.' + request.url;
    if (filePath == './') {
        filePath = './index.html';
    }

    var extname = String(path.extname(filePath)).toLowerCase();
    var mimeTypes = {
        '.html': 'text/html',
        '.js': 'text/javascript',
        '.css': 'text/css',
        '.json': 'application/json',
        '.png': 'image/png',
        '.jpg': 'image/jpg',
        '.gif': 'image/gif',
        '.svg': 'image/svg+xml',
        '.wav': 'audio/wav',
        '.mp4': 'video/mp4',
        '.woff': 'application/font-woff',
        '.ttf': 'application/font-ttf',
        '.eot': 'application/vnd.ms-fontobject',
        '.otf': 'application/font-otf',
        '.wasm': 'application/wasm'
    };

    var contentType = mimeTypes[extname] || 'application/octet-stream';

    fs.readFile(filePath, function(error, content) {
        if (error) {
            if(error.code == 'ENOENT') {
                fs.readFile('./404.html', function(error, content) {
                    response.writeHead(404, { 'Content-Type': 'text/html' });
                    response.end(content, 'utf-8');
                });
            }
            else {
                response.writeHead(500);
                response.end('Sorry, check with the site admin for error: '+error.code+' ..\n');
            }
        }
        else {
            response.writeHead(200, { 'Content-Type': contentType });
            response.end(content, 'utf-8');
        }
    });

}).listen(port);

console.log(`Server listening on port ${port}`);

io.sockets.on('connection', function (socket) {// WebSocket Connection
  var lightvalue = 0; //static variable for current status
  socket.on('light', function(data) { //get light switch status from client
    lightvalue = data;
    if (lightvalue) {
      console.log(lightvalue); //turn LED on or off, for now we will just show it in console.log
      ammo = 10;
      console.log('RELOADED! Ammo:' + ammo);
    }
  });
});



function pollcb(pin)
{
        /*
         * Wait for a small period of time to avoid rapid changes which
         * can't all be caught with the 1ms polling frequency.  If the
         * pin is no longer down after the wait then ignore it.
         */
        rpio.msleep(20);

        if (rpio.read(pin))
                return;

        console.log('Button pressed on pin P%d', pin);

        --ammo;

        console.log('Ammo left ' + ammo);


        io.sockets.emit("push-button", ammo);

        
}

rpio.poll(rpioPin, pollcb, rpio.POLL_LOW);

  
